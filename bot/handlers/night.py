from aiogram import types
from db import queries as db
from core.ai import get_fairytale
from core.tts import synthesize_voice_with_yandex
from aiogram.types import FSInputFile
import os
from datetime import datetime


async def night_tale(message: types.Message):
    user = await db.get_user(message.from_user.id)
    subscription, coins = user[1], user[3]

    if subscription not in ["extended", "premium"]:
        await message.answer("üõå –°–∫–∞–∑–∫–∞ –Ω–∞ –Ω–æ—á—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏ –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ–æ–≤!")
        return

    theme = "—É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∞—è —Å–∫–∞–∑–∫–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞"
    message_count = int(datetime.now().timestamp()) % 100000  # –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤–∞

    fairytale = get_fairytale(theme, message_count)
    voice = "jane"  # –ú–æ–∂–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ

    audio_path = synthesize_voice_with_yandex(fairytale, voice)
    if audio_path:
        await db.save_tale(message.from_user.id, fairytale, audio_path, "night_audio")
        await db.add_skazka(fairytale, audio_path, "night_audio")
        await message.answer("üåô –í–∫–ª—é—á–∞—é –Ω–æ—á–Ω—É—é –∫–æ–ª—ã–±–µ–ª—å–Ω—É—é —Å–∫–∞–∑–∫—É...")
        await message.answer_voice(FSInputFile(audio_path), caption="–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤... üí§")
    else:
        await db.save_tale(message.from_user.id, fairytale, None, "night")
        await db.add_skazka(fairytale, None, "night")
        await message.answer(fairytale + "\n\n(–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ ‚Äî —á–∏—Ç–∞—é —Ç–µ–∫—Å—Ç–æ–º)")
