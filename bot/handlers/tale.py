# bot/handlers/tale.py
import logging

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from bot.states import DialogState
from core.ai import get_fairytale
from core.tts import synthesize_voice_with_yandex
from db import queries as db
from aiogram.types import FSInputFile
from bot.keyboards.main_menu import main_menu
import os
from datetime import datetime


async def start_command(message: types.Message, state: FSMContext):
    await db.add_user(message.from_user.id)
    await state.clear()
    await state.update_data(message_count=0)
    await message.answer(
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ‚Äú–ü–æ—Ä—Ç–∞–ª –≤ –°–∫–∞–∑–∫—É‚Äù!\n"
        "–Ø —Ä–∞—Å—Å–∫–∞–∂—É –≤–æ–ª—à–µ–±–Ω—ã–µ —Å–∫–∞–∑–∫–∏ –≥–æ–ª–æ—Å–∞–º–∏ –ö–æ—Ç–∞ –ë–∞—é–Ω–∞ –∏ –†—É—Å–∞–ª–∫–∏.\n"
        "–í—ã–±–∏—Ä–∞–π—Ç–µ ‚Äî –∏ –æ—Ç–∫—Ä–æ–µ–º –ø–æ—Ä—Ç–∞–ª‚Ä¶",
        reply_markup=main_menu
    )


async def tell_tale(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    if not user:
        await db.add_user(message.from_user.id)
        user = await db.get_user(message.from_user.id)

    if user[1] == "free":
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ‚Äî /subscribe")
    else:
        await state.set_state(DialogState.awaiting_theme)
        await state.update_data(message_count=0)
        await message.answer("üéØ –ó–∞–¥–∞–π —Ç–µ–º—É –¥–ª—è —Å–∫–∞–∑–∫–∏:")


async def process_theme(message: types.Message, state: FSMContext):
    # logging.warning(f"[FSM] handler triggered. CURRENT STATE: {await state.get_state()}")

    user = await db.get_user(message.from_user.id)
    subscription, coins = user[1], user[3]
    voice = "jane"

    data = await state.get_data()
    message_count = data.get("message_count", 0) + 1
    await state.update_data(message_count=message_count)

    fairytale = get_fairytale(message.text, message_count)
    await db.save_tale(message.from_user.id, fairytale, None, "text")
    await db.add_skazka(fairytale, None, "text")

    if subscription == "premium" or coins > 0:
        audio_path = synthesize_voice_with_yandex(fairytale, voice)
        if audio_path:
            await db.save_tale(message.from_user.id, fairytale, audio_path, "audio")
            await db.add_skazka(fairytale, audio_path, "audio")
            await message.answer_voice(FSInputFile(audio_path), caption="–í–æ—Ç —Ç–≤–æ—è —Å–∫–∞–∑–∫–∞ üéô")
            if subscription != "premium":
                await db.update_user(message.from_user.id, coins=coins - 1)
        else:
            await message.answer(fairytale + "\n\n–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ üò¢")
    else:
        await message.answer(fairytale + "\n\nü™ô –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –∞—É–¥–∏–æ. –ö—É–ø–∏—Ç–µ ‚Äî /coins")

    await state.clear()


async def tell_random_tale(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    if not user:
        await db.add_user(message.from_user.id)
        user = await db.get_user(message.from_user.id)

    subscription, coins, daily_limit, audio_limit = user[1], user[3], user[4], user[5]
    today = datetime.now().date()
    sub_start = datetime.fromisoformat(user[2]).date()

    if subscription == "free":
        if (today - sub_start).days < 3 and audio_limit > 0:
            skazka = await db.get_random_skazka("audio")
            if skazka and skazka[1] and os.path.exists(skazka[1]):
                await db.update_user(message.from_user.id, audio_limit=audio_limit - 1)
                await db.save_tale(message.from_user.id, skazka[0], skazka[1], "audio")
                await message.answer_voice(FSInputFile(skazka[1]), caption="–í–æ—Ç —Ç–≤–æ—è —Å–ª—É—á–∞–π–Ω–∞—è —Å–∫–∞–∑–∫–∞ üéô")
            else:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ—Å–∫–∞–∑–æ–∫ –∏–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        else:
            skazka = await db.get_random_skazka("text")
            if skazka:
                await db.save_tale(message.from_user.id, skazka[0], None, "text")
                await message.answer(skazka[0] + "\n\nüßô –ì–æ–ª–æ—Å –ë–∞—é–Ω–∞ —É—Å–Ω—É–ª‚Ä¶\n"
                                                     "–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —É—Å–ª—ã—à–∞—Ç—å –µ–≥–æ, –æ—Ñ–æ—Ä–º–∏–≤ –ó–æ–ª–æ—Ç—É—é –ø–æ–¥–ø–∏—Å–∫—É ‚Äî /subscribe")
            else:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–∫–∞–∑–æ–∫!")
    else:
        skazka = await db.get_random_skazka("audio") if coins > 0 or subscription == "premium" else await db.get_random_skazka("text")
        if skazka:
            if skazka[1] and os.path.exists(skazka[1]):
                await db.save_tale(message.from_user.id, skazka[0], skazka[1], "audio")
                await message.answer_voice(FSInputFile(skazka[1]), caption="–í–æ—Ç —Ç–≤–æ—è —Å–ª—É—á–∞–π–Ω–∞—è —Å–∫–∞–∑–∫–∞ üéô")
                if subscription != "premium":
                    await db.update_user(message.from_user.id, coins=coins - 1)
            else:
                await db.save_tale(message.from_user.id, skazka[0], None, "text")
                await message.answer(skazka[0])
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∞–∑–æ–∫ –≤ –±–∞–∑–µ!")
