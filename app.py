import asyncio
import logging
import os
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from pydub import AudioSegment
from openai import OpenAI
from datetime import datetime, timedelta
import db

# Load .env
load_dotenv()

# Logging
logging.basicConfig(level=logging.INFO)

# Tokens
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
XAI_API_KEY = os.getenv("AI_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Check
if not TELEGRAM_TOKEN or not XAI_API_KEY or not YANDEX_API_KEY or not YANDEX_FOLDER_ID or not OPENAI_API_KEY:
    raise ValueError("Missing .env tokens")

# Create directory for audio files
AUDIO_DIR = "audio_files"
if not os.path.exists(AUDIO_DIR):
    os.makedirs(AUDIO_DIR)

# Init
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
client = OpenAI(api_key=OPENAI_API_KEY)


class DialogState(StatesGroup):
    message_count = State()
    awaiting_theme = State()
    awaiting_name = State()


# Main menu
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìñ –†–∞—Å—Å–∫–∞–∂–∏ —Å–∫–∞–∑–∫—É"), KeyboardButton(text="üó£ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å")],
        [KeyboardButton(text="üìö –†–∞—Å—Å–∫–∞–∂–∏ —Ä–∞–Ω–¥–æ–º–Ω—É—é —Å–∫–∞–∑–∫—É"), KeyboardButton(text="üß∏ –†–∞—Å—Å–∫–∞–∂–∏ –∏–º–µ–Ω–Ω—É—é —Å–∫–∞–∑–∫—É")],
        [KeyboardButton(text="üí´ –ü–æ–¥–ø–∏—Å–∫–∞"), KeyboardButton(text="ü™ô –ú–æ–Ω–µ—Ç—ã")],
        [KeyboardButton(text="üõå –°–∫–∞–∑–∫–∞ –Ω–∞ –Ω–æ—á—å"), KeyboardButton(text="üéÅ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")],
        [KeyboardButton(text="‚Ñπ –ü–æ–º–æ—â—å")],
    ],
    resize_keyboard=True
)


# Fairytale logic
def get_grok_response(message, message_count, is_named=False):
    system_prompt = """
    –¢—ã ‚Äî —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Ä—É—Å—Å–∫–∏—Ö –Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π –∏ –º–∞—Å—Ç–µ—Ä —Å–∫–∞–∑–æ—á–Ω–æ–≥–æ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–æ–ª—à–µ–±–Ω—ã–µ —Å–∫–∞–∑–∫–∏ –≤ –¥—É—Ö–µ —Ä—É—Å—Å–∫–æ–≥–æ —Ñ–æ–ª—å–∫–ª–æ—Ä–∞, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —á—É–¥–µ—Å–∞–º–∏, –¥–æ–±—Ä—ã–º–∏ —É—Ä–æ–∫–∞–º–∏ –∏ —è—Ä–∫–∏–º–∏ –æ–±—Ä–∞–∑–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∞—Ä—Ö–∞–∏—á–Ω—ã–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫, –¥–æ–±–∞–≤–ª—è–π —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Ä–æ–¥—ã, –º–∞–≥–∏–∏ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–∞–±–∞-–Ø–≥–∞, –ö–æ—â–µ–π, —Ä—É—Å–∞–ª–∫–∏, –ª–µ—à–∏–µ). –°–∫–∞–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π, —Å –º–æ—Ä–∞–ª—å—é, –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –¥–µ—Ç–µ–π. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç —Ç–µ–º—É, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –µ–π, –Ω–æ –¥–æ–±–∞–≤–ª—è–π —Å–∫–∞–∑–æ—á–Ω—ã–π –∫–æ–ª–æ—Ä–∏—Ç. –ï—Å–ª–∏ —Ç–µ–º—ã –Ω–µ—Ç, –ø—Ä–∏–¥—É–º–∞–π —Å–≤–æ—é, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—è—Å—å —Ä—É—Å—Å–∫–∏–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏.
    """
    if is_named:
        system_prompt += "\n–°–¥–µ–ª–∞–π —Å–∫–∞–∑–∫—É –∏–º–µ–Ω–Ω–æ–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è."
    try:
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä {message_count}: {message}"}
            ],
            max_tokens=2000,
            temperature=0.85
        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–∞–∑–∫–∏."


# TTS via Yandex Cloud
def synthesize_voice_with_yandex(text, voice="jane"):
    try:
        url = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
        headers = {"Authorization": f"Api-Key {YANDEX_API_KEY}"}
        data = {
            "text": text,
            "lang": "ru-RU",
            "voice": voice,
            "emotion": "good",
            "format": "mp3",
            "folderId": YANDEX_FOLDER_ID
        }
        response = requests.post(url, headers=headers, data=data)
        if response.status_code != 200:
            logging.error(f"Yandex TTS Error: {response.text}")
            return None
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        audio_path = os.path.join(AUDIO_DIR, f"audio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp3")
        with open(audio_path, "wb") as f:
            f.write(response.content)
        return audio_path
    except Exception as e:
        logging.error(f"Yandex TTS Error: {e}")
        return None


# Start command
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    await db.add_user(message.from_user.id)
    await state.update_data(message_count=0)
    await message.answer(
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ‚Äú–ü–æ—Ä—Ç–∞–ª –≤ –°–∫–∞–∑–∫—É‚Äù!\n"
        "–Ø —Ä–∞—Å—Å–∫–∞–∂—É –≤–æ–ª—à–µ–±–Ω—ã–µ —Å–∫–∞–∑–∫–∏ –≥–æ–ª–æ—Å–∞–º–∏ –ö–æ—Ç–∞ –ë–∞—é–Ω–∞ –∏ –†—É—Å–∞–ª–∫–∏.\n"
        "–í—ã–±–∏—Ä–∞–π—Ç–µ ‚Äî –∏ –æ—Ç–∫—Ä–æ–µ–º –ø–æ—Ä—Ç–∞–ª‚Ä¶",
        reply_markup=main_menu
    )


# Tell a tale (by theme)
@dp.message(Command("skazka"))
@dp.message(lambda message: message.text == "üìñ –†–∞—Å—Å–∫–∞–∂–∏ —Å–∫–∞–∑–∫—É")
async def tell_tale(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    if not user:
        await db.add_user(message.from_user.id)
        user = await db.get_user(message.from_user.id)

    subscription = user[1]
    if subscription == "free":
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ‚Äî /subscribe")
    else:
        await message.answer("üéØ –ó–∞–¥–∞–π —Ç–µ–º—É –¥–ª—è —Å–∫–∞–∑–∫–∏:")
        await state.set_state(DialogState.awaiting_theme)


@dp.message(DialogState.awaiting_theme)
async def process_theme(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    subscription, coins = user[1], user[3]
    voice = "jane"  # Default

    data = await state.get_data()
    message_count = data.get("message_count", 0) + 1
    await state.update_data(message_count=message_count)

    fairytale = get_grok_response(message.text, message_count)
    await db.save_tale(message.from_user.id, fairytale, None, "text")
    await db.add_skazka(fairytale, None, "text")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É skazki

    if subscription == "premium" or coins > 0:
        audio_path = synthesize_voice_with_yandex(fairytale, voice)
        if audio_path:
            await db.save_tale(message.from_user.id, fairytale, audio_path, "audio")
            await db.add_skazka(fairytale, audio_path, "audio")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ç–∞–±–ª–∏—Ü—É skazki
            await message.answer_voice(FSInputFile(audio_path), caption="–í–æ—Ç —Ç–≤–æ—è —Å–∫–∞–∑–∫–∞ üéô")
            await db.update_user(message.from_user.id, coins=coins - 1 if subscription != "premium" else coins)
        else:
            await message.answer(fairytale + "\n\n–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ üò¢")
    else:
        await message.answer(fairytale + "\n\nü™ô –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –∞—É–¥–∏–æ. –ö—É–ø–∏—Ç–µ ‚Äî /coins")
    await state.clear()


# Tell a random tale
@dp.message(lambda message: message.text == "üìö –†–∞—Å—Å–∫–∞–∂–∏ —Ä–∞–Ω–¥–æ–º–Ω—É—é —Å–∫–∞–∑–∫—É")
async def tell_random_tale(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    if not user:
        await db.add_user(message.from_user.id)
        user = await db.get_user(message.from_user.id)

    subscription, coins, daily_limit, audio_limit = user[1], user[3], user[4], user[5]
    today = datetime.now().date()
    sub_start = datetime.fromisoformat(user[2]).date()

    if subscription == "free":
        if (today - sub_start).days < 3 and audio_limit > 0:
            skazka = await db.get_random_skazka("audio")
            if skazka and skazka[1] and os.path.exists(skazka[1]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                await db.update_user(message.from_user.id, audio_limit=audio_limit - 1)
                await db.save_tale(message.from_user.id, skazka[0], skazka[1], "audio")
                await message.answer_voice(FSInputFile(skazka[1]), caption="–í–æ—Ç —Ç–≤–æ—è —Å–ª—É—á–∞–π–Ω–∞—è —Å–∫–∞–∑–∫–∞ üéô")
            else:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ—Å–∫–∞–∑–æ–∫ –≤ –±–∞–∑–µ –∏–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        else:
            skazka = await db.get_random_skazka("text")
            if skazka:
                await db.save_tale(message.from_user.id, skazka[0], None, "text")
                await message.answer(skazka[0] + "\n\nüßô –ì–æ–ª–æ—Å –ë–∞—é–Ω–∞ —É—Å–Ω—É–ª‚Ä¶\n"
                                                 "–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —É—Å–ª—ã—à–∞—Ç—å –µ–≥–æ, –æ—Ñ–æ—Ä–º–∏–≤ –ó–æ–ª–æ—Ç—É—é –ø–æ–¥–ø–∏—Å–∫—É ‚Äî /subscribe")
            else:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–∫–∞–∑–æ–∫ –≤ –±–∞–∑–µ!")
    else:
        skazka = await db.get_random_skazka(
            "audio") if coins > 0 or subscription == "premium" else await db.get_random_skazka("text")
        if skazka:
            if skazka[1] and os.path.exists(skazka[1]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                await db.save_tale(message.from_user.id, skazka[0], skazka[1], "audio")
                await message.answer_voice(FSInputFile(skazka[1]), caption="–í–æ—Ç —Ç–≤–æ—è —Å–ª—É—á–∞–π–Ω–∞—è —Å–∫–∞–∑–∫–∞ üéô")
                await db.update_user(message.from_user.id, coins=coins - 1 if subscription != "premium" else coins)
            else:
                await db.save_tale(message.from_user.id, skazka[0], None, "text")
                await message.answer(skazka[0])
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∞–∑–æ–∫ –≤ –±–∞–∑–µ!")


# Tell a named tale
@dp.message(lambda message: message.text == "üß∏ –†–∞—Å—Å–∫–∞–∂–∏ –∏–º–µ–Ω–Ω—É—é —Å–∫–∞–∑–∫—É")
async def tell_named_tale(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    if not user:
        await db.add_user(message.from_user.id)

    subscription, coins = user[1], user[3]
    if subscription == "free" or (subscription != "premium" and coins < 2):
        await message.answer(
            "–î–ª—è –∏–º–µ–Ω–Ω–æ–π —Å–∫–∞–∑–∫–∏ –Ω—É–∂–Ω–æ 2 –º–æ–Ω–µ—Ç—ã –∏–ª–∏ –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ‚Äî /coins –∏–ª–∏ /subscribe")
    else:
        await message.answer("üß∏ –ö–∞–∫ –∑–æ–≤—É—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è —Å–∫–∞–∑–∫–∏?")
        await state.set_state(DialogState.awaiting_name)


@dp.message(DialogState.awaiting_name)
async def process_named_tale(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    subscription, coins = user[1], user[3]
    voice = "jane"  # Default

    data = await state.get_data()
    message_count = data.get("message_count", 0) + 1
    await state.update_data(message_count=message_count)

    fairytale = get_grok_response(message.text, message_count, is_named=True)
    await db.save_tale(message.from_user.id, fairytale, None, "named")
    await db.add_skazka(fairytale, None, "named")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É skazki

    if subscription == "premium" or coins >= 2:
        audio_path = synthesize_voice_with_yandex(fairytale, voice)
        if audio_path:
            await db.save_tale(message.from_user.id, fairytale, audio_path, "named_audio")
            await db.add_skazka(fairytale, audio_path, "named_audio")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ç–∞–±–ª–∏—Ü—É skazki
            await message.answer_voice(FSInputFile(audio_path), caption="–í–æ—Ç —Ç–≤–æ—è –∏–º–µ–Ω–Ω–∞—è —Å–∫–∞–∑–∫–∞ üéô")
            await db.update_user(message.from_user.id, coins=coins - 2 if subscription != "premium" else coins)
        else:
            await message.answer(fairytale + "\n\n–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ üò¢")
    else:
        await message.answer(fairytale)
    await state.clear()


# Voice selection
@dp.message(Command("voice"))
@dp.message(lambda message: message.text == "üó£ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å")
async def choose_voice(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:\nüêæ –ö–æ—Ç –ë–∞—é–Ω–∞ (ermil)\nüßú‚Äç‚ôÄÔ∏è –†—É—Å–∞–ª–∫–∞ (jane)\n"
                         "–í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")


# Subscription
@dp.message(Command("subscribe"))
@dp.message(lambda message: message.text == "üí´ –ü–æ–¥–ø–∏—Å–∫–∞")
async def subscription(message: types.Message):
    await message.answer(
        "üîì –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∞–≥–∏–∏ —Å–∫–∞–∑–æ–∫\n\n"
        "üßπ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 1 —Ç–µ–∫—Å—Ç/–¥–µ–Ω—å, 3 –¥–Ω—è –∞—É–¥–∏–æ\n"
        "üü° –ó–æ–ª–æ—Ç–æ–π (499 ‚ÇΩ): 1 –∞—É–¥–∏–æ/–¥–µ–Ω—å + —Ç–µ–∫—Å—Ç\n"
        "üîµ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π (999 ‚ÇΩ): 2 –∞—É–¥–∏–æ/–¥–µ–Ω—å, –∞—Ä—Ö–∏–≤\n"
        "üëë –ü—Ä–µ–º–∏—É–º (2990 ‚ÇΩ): –±–µ–∑–ª–∏–º–∏—Ç, –∏–º–µ–Ω–Ω—ã–µ\n\n"
        "–ü–ª–∞—Ç–µ–∂–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã!"
    )


# Coins
@dp.message(Command("coins"))
@dp.message(lambda message: message.text == "ü™ô –ú–æ–Ω–µ—Ç—ã")
async def coins(message: types.Message):
    user = await db.get_user(message.from_user.id)
    coins = user[3]
    await message.answer(
        f"ü™ô –í–∞—à –±–∞–ª–∞–Ω—Å: {coins} –º–æ–Ω–µ—Ç\n\n"
        "üìñ –°–∫–∞–∑–∫–∞ –ø–æ —Ç–µ–º–µ ‚Äî 1 –º–æ–Ω–µ—Ç–∞\n"
        "üéß –ê—É–¥–∏–æ—Å–∫–∞–∑–∫–∞ ‚Äî 1 –º–æ–Ω–µ—Ç–∞\n"
        "üß∏ –ò–º–µ–Ω–Ω–∞—è —Å–∫–∞–∑–∫–∞ ‚Äî 2 –º–æ–Ω–µ—Ç—ã\n"
        "üåô –°–∫–∞–∑–∫–∞ —Å –∫–æ–ª—ã–±–µ–ª—å–Ω–æ–π ‚Äî 2 –º–æ–Ω–µ—Ç—ã\n\n"
        "–ü–∞–∫–µ—Ç—ã:\n5 –º–æ–Ω–µ—Ç ‚Äî 149 ‚ÇΩ\n15 –º–æ–Ω–µ—Ç ‚Äî 399 ‚ÇΩ\n50 –º–æ–Ω–µ—Ç ‚Äî 999 ‚ÇΩ\n"
        "–ü–æ–∫—É–ø–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!"
    )


# Night mode
@dp.message(Command("night"))
@dp.message(lambda message: message.text == "üõå –°–∫–∞–∑–∫–∞ –Ω–∞ –Ω–æ—á—å")
async def night_tale(message: types.Message):
    user = await db.get_user(message.from_user.id)
    if user[1] in ["extended", "premium"]:
        await message.answer("üõè –†–µ–∂–∏–º ‚Äú–ù–∞ –Ω–æ—á—å‚Äù –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                             "–°–∫–æ—Ä–æ —Ä–∞—Å—Å–∫–∞–∂—É —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â—É—é —Å–∫–∞–∑–∫—É‚Ä¶")
    else:
        await message.answer("üõå –°–∫–∞–∑–∫–∞ –Ω–∞ –Ω–æ—á—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏ –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ–æ–≤!")


# Collection
@dp.message(Command("collection"))
@dp.message(lambda message: message.text == "üéÅ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")
async def collection(message: types.Message):
    user = await db.get_user(message.from_user.id)
    if user[1] in ["extended", "premium"]:
        tales = await db.get_user_tales(message.from_user.id)
        if tales:
            response = "üéÅ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–∑–∫–∏:\n"
            for tale in tales:
                response += f"{tale[3]} - {tale[2]}\n"
            await message.answer(response)
        else:
            await message.answer("üéÅ –ü–æ–∫–∞ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ!")
    else:
        await message.answer("üéÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏ –ü—Ä–µ–º–∏—É–º —Ç–∞—Ä–∏—Ñ–æ–≤!")


# Help
@dp.message(Command("help"))
@dp.message(lambda message: message.text == "‚Ñπ –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    await message.answer("‚Ñπ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä —Å–∫–∞–∑–æ–∫!\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/skazka ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∞–∑–∫—É\n"
                         "/subscribe ‚Äî —É–∑–Ω–∞—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–µ\n"
                         "/coins ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–Ω–µ—Ç—ã")


# Admin stats
@dp.message(Command("admin_stats"))
async def admin_stats(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        stats = await db.get_stats(message.from_user.id)
        await message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nTTS –º–∏–Ω—É—Ç: {stats[0]}\n–°–∫–∞–∑–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats[1]}")
    else:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")


# Fallback for unrecognized messages
@dp.message()
async def handle_unknown(message: types.Message):
    await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!")


# Run
async def main():
    await db.init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())